(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"1bI9":function(e,n,t){"use strict";t.r(n),t.d(n,"title",(function(){return s})),t.d(n,"metadata",(function(){return l})),t.d(n,"default",(function(){return f}));var o=t("kOwS"),r=t("qNsG"),i=t("q1tI"),a=t.n(i),c=t("7ljp"),s=(a.a.createElement,"A simple proof-of-work blockchain written in Rust"),l={date:"20200223",slug:"simple-blockchain-written-in-rust"},u={title:s,metadata:l},p="wrapper";function f(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)(p,Object(o.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/lalotai/rust-blockchain"}),"rust-blockchain")," is a simple implementation of proof-of-work blockchain written in Rust \ud83e\udd80 As stated in the repo, this is mostly a playground and is therefore not intended to be taken ","[too]"," seriously."),Object(c.b)("p",null,"The code is meant to be run on a single machine but in multiple windows. One window can broadcast randomly generated transactions and another mines the blocks once a minimum number of transactions has been found in mempool."),Object(c.b)("p",null,"The video below shows the miner in action:"),Object(c.b)("script",{id:"asciicast-304022",src:"https://asciinema.org/a/304022.js",async:!0}),Object(c.b)("h3",null,"Design"),Object(c.b)("p",null,"The design of the blockchain is typical of any proof-of-work concept. Received transactions are assembled in a block, sorted by fees in descending order, and a hash is computed to see if the difficulty has been met."),Object(c.b)("p",null,"On my local i9 w/ 64GB of RAM, the difficulty of 2 seems to be good enough for testing (the hash is not found too quickly or too slowly). Therefore a computed sha256 hash of the new block might look something like this: ",Object(c.b)("inlineCode",{parentName:"p"},"00cd8a380e8d5fd3ac47c1f880390341d40b11485e8ae946d8fa3d466f23fe89")," (notice the 2 zeros at the front)."),Object(c.b)("p",null,"Communication between nodes is done via a simple TCP stream. Once the node joins, it pings other nodes to catch up on any missed transactions and blocks. As soon as the new node is caught up it begins mining transactions in its own mempool. You can test this by running ",Object(c.b)("inlineCode",{parentName:"p"},"cargo run mine")," in one window, and then a few seconds later the same command in another. Notice how the second window has all the blocks and transactions."))}f.isMDXComponent=!0},"4mXO":function(e,n,t){e.exports=t("7TPF")},"7TPF":function(e,n,t){t("AUvm"),e.exports=t("WEpk").Object.getOwnPropertySymbols},"7ljp":function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var o=t("q1tI"),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),u=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):c({},n,{},e)),t},p=function(e){var n=u(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},f="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,d=p["".concat(a,".").concat(f)]||p[f]||b[f]||i;return t?r.a.createElement(d,c({ref:n},l,{components:t})):r.a.createElement(d,c({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[f]="string"===typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},"8z8O":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/simple-blockchain-written-in-rust",function(){return t("1bI9")}])},UXZV:function(e,n,t){e.exports=t("UbbE")},UbbE:function(e,n,t){t("o8NH"),e.exports=t("WEpk").Object.assign},kOwS:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var o=t("UXZV"),r=t.n(o);function i(){return(i=r.a||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}},o8NH:function(e,n,t){var o=t("Y7ZC");o(o.S+o.F,"Object",{assign:t("kwZ1")})},qNsG:function(e,n,t){"use strict";var o=t("4mXO"),r=t.n(o),i=t("pLtp"),a=t.n(i);function c(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,r={},i=a()(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(r.a){var c=r()(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}t.d(n,"a",(function(){return c}))}},[["8z8O",1,2,0]]]);